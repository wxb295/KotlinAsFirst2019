@file:Suppress("UNUSED_PARAMETER")

package lesson1.task1

import kotlin.math.*

/**
 * Пример
 *
 * Вычисление квадрата целого числа
 */
fun sqr(x: Int) = x * x

/**
 * Пример
 *
 * Вычисление квадрата вещественного числа
 */
fun sqr(x: Double) = x * x

/**
 * Пример
 *
 * Вычисление дискриминанта квадратного уравнения
 */
fun discriminant(a: Double, b: Double, c: Double) = sqr(b) - 4 * a * c

/**
 * Пример
 *
 * Поиск одного из корней квадратного уравнения
 */
fun quadraticEquationRoot(a: Double, b: Double, c: Double) =
    (-b + sqrt(discriminant(a, b, c))) / (2 * a)

/**
 * Пример
 *
 * Поиск произведения корней квадратного уравнения
 */
fun quadraticRootProduct(a: Double, b: Double, c: Double): Double {
    val sd = sqrt(discriminant(a, b, c))
    val x1 = (-b + sd) / (2 * a)
    val x2 = (-b - sd) / (2 * a)
    return x1 * x2 // Результат
}

/**
 * Пример главной функции
 */
fun main() {
    val x1x2 = quadraticRootProduct(1.0, 13.0, 42.0)
    println("Root product: $x1x2")
}

/**
 * Тривиальная
 *
 * Пользователь задает время в часах, минутах и секундах, например, 8:20:35.
 * Рассчитать время в секундах, прошедшее с начала суток (30035 в данном случае).
 */
fun seconds(hours: Int, minutes: Int, seconds: Int): Int = (hours * 3600 + minutes * 60 + seconds)

/**
 * Тривиальная
 *
 *Процедура
Дата и время начала экзамена приведены выше. Допускаются к экзамену все студенты, имеющие зачёт по данному курсу; получившим автомат по итогам практики и тестирования на экзамен можно не приходить. С собой иметь зачётную книжку и, если студент считает это необходимым -- материалы для письма, любые учебные материалы, ноутбук. Приходить на экзамен следует к началу времени вашей группы. Если по каким-либо причинам вы хотите прийти сдавать экзамен с другой группой -- обязательно предупредите об этом экзаменатора. Имейте в виду, что сдавать экзамен дважды в один день или два дня подряд не разрешается.

Экзамен заключается в решении задачи и написании тестов для проверки решения. Задача решается на компьютере в аудитории или на ноутбуке студента. Для получения положительной оценки необходимо продемонстрировать преподавателю работающее на компьютере решение.

Билет содержит одну задачу, задача может использовать материалы из всех разделов курса. В каждом билете отдельно приведены требования, необходимые для получения оценок "удовлетворительно", "хорошо" и "отлично". Студент должен быть в состоянии объяснить экзаменатору своё решение, использованные в нём элементы языка и стандартной библиотеки. От претендентов на высокую оценку ожидается также способность обосновать, почему задача решена именно так и провести сравнение с другими возможными решениями.

На экзамене разрешается пользоваться конспектом, Интернетом, любыми книгами. Запрещается общаться с кем-либо, кроме экзаменатора, пользоваться электронной почтой, социальными сетями и другими средствами общения.

Максимальная длительность экзамена 2 часа 45 минут. Из них 2 часа отводится на решение задачи и 30 минут на исправление замечаний экзаменатора, 15 минут остаются в резерве.

Порядок подготовки
Подготовку распределите равномерно. Во время подготовки к экзамену рекомендуется заниматься программированием по 6-8 часов в день (из которых 1-2 часа должно посвящаться теории, остальное - практике). Не откладывайте все на конец. Если при подготовке возникают вопросы - напишите письмо преподавателю. Также вопросы можно будет задать на консультации.

Перечитайте материалы лекций. Убедитесь, что вы помните наизусть синтаксические правила записи всех использованных в лекциях конструкций (вы, конечно, можете на экзамене консультироваться каждый раз с литературой, но в этом случае вам не хватит отведенного времени). В первую очередь это касается основных уроков 1-7.

Большую часть времени подготовки следует уделить самостоятельному решению задач из обучающего проекта (лучше тех, которые вы не решали в течение семестра). В идеале, каждый день подготовки вы должны решать по 2-3 задачи. Важно решить при подготовке по несколько задач из уроков 6-9, особенную важность имеют задачи из урока 7.

NB: консультация предназначена для того, чтобы студенты могли задать преподавателю вопросы по изученному материалу и порядку проведения экзамена. На консультации не будет дополнительной лекции по программированию, магических рекомендаций о том, как сдать экзамен и тому подобных вещей. Консультация необязательна для посещения. Объявления, касающиеся времени и порядка проведения экзамена, будут размещаться на этой странице.

Советы экзаменуемому
Выспитесь. Лихорадочная подготовка в последнюю ночь ни к чему хорошему не приведет.
Первым делом внимательно прочитайте условие задачи. Убедитесь, что вы понимаете его полностью. В случае малейших сомнений задайте вопрос(ы) экзаменатору.
До написания программы прикиньте на бумаге алгоритм решения задачи (хотя бы ключевые моменты).
Решая задачу, пользуйтесь только теми конструкциями и методами, в которых вы разбираетесь хорошо, экзамен -- не место для того, чтобы пытаться разобраться в неизвестных вам материалах.
Следуйте тому пути решения, который вы сами считаете наиболее простым. Если сомневаетесь в себе -- начните с решения минимальной задачи на оценку "удовлетворительно" и продемонстрируйте решение преподавателю, и только после этого приступайте к улучшениям решения для получения оценок "хорошо" или "отлично".
Не торопитесь и не суетитесь. Двух часов времени больше чем достаточно для решения любой экзаменационной задачи.
 */
fun lengthInMeters(sagenes: Int, arshins: Int, vershoks: Int): Double =( vershoks + arshins * 16 + sagenes * 48 ) * 0.0445

/**
 * Тривиальная
 *
 * Пользователь задает угол в градусах, минутах и секундах (например, 36 градусов 14 минут 35 секунд).
 * Вывести значение того же угла в радианах (например, 0.63256).
 */
fun angleInRadian(deg: Int, min: Int, sec: Int): Double = (deg + min / 60.0 + sec / 3600.0) * PI /180.0

/**
 * Тривиальная
 *
 * Найти длину отрезка, соединяющего точки на плоскости с координатами (x1, y1) и (x2, y2).
 * Например, расстояние между (3, 0) и (0, 4) равно 5
 */
fun trackLength(x1: Double, y1: Double, x2: Double, y2: Double): Double {
    val a = sqr(x2 - x1)
    val b = sqr(y2 - y1)
    return sqrt(a + b)
}


/**
 * Простая
 *
 * Пользователь задает целое число, большее 100 (например, 3801).
 * Определить третью цифру справа в этом числе (в данном случае 8).
 */
fun thirdDigit(number: Int): Int =( number / 100 % 10 )

/**
 * Простая
 *
 * Поезд вышел со станции отправления в h1 часов m1 минут (например в 9:25) и
 * прибыл на станцию назначения в h2 часов m2 минут того же дня (например в 13:01).
 * Определите время поезда в пути в минутах (в данном случае 216).
 */

fun travelMinutes(hoursDepart: Int, minutesDepart: Int, hoursArrive: Int, minutesArrive: Int): Int =
    (hoursArrive - hoursDepart) * 60 + (minutesArrive - minutesDepart)
/**
 * Простая
 *
 * Человек положил в банк сумму в s рублей под p% годовых (проценты начисляются в конце года).
 * Сколько денег будет на счету через 3 года (с учётом сложных процентов)?
 * Например, 100 рублей под 10% годовых превратятся в 133.1 рубля
 */
fun accountInThreeYears(initial: Int, percent: Int): Double = initial * (1 + percent * 0.01) . pow(3)

/**
 * Простая
 *
 * Пользователь задает целое трехзначное число (например, 478).
 * Необходимо вывести число, полученное из заданного перестановкой цифр в обратном порядке (например, 874).
 */
fun numberRevert(number: Int): Int = (number % 10) * 100 +(number / 10) % 10* 10 + number / 100
